/*
 * Glacier API
 * The Glacier API provides web3 application developers with multi-chain        data related to Avalanche's primary network, Avalanche subnets, and        Ethereum. With Glacier, you can easily build products that leverage        real-time and historical transaction and transfer history, native and        token balances, and various types of token metadata. The API is in Beta        and may be subject to change.        </br></br>        If you have feedback or feature requests for the API, please submit them        <a href=\"https://portal.productboard.com/dndv9ahlkdfye4opdm8ksafi/tabs/4-glacier-api\">here</a>. Bug reports can be submitted        <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeJQrcp7QoNiqozMDKrVJGX5wpU827d3cVTgF8qa7t_J1Pb-g/viewform\">here</a>, and any potential security        issues can be reported <a href=\"https://hackenproof.com/avalanche\">here</a>.
 *
 * OpenAPI spec version: Beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CurrencyCode;
import io.swagger.client.model.GetBlockResponse;
import io.swagger.client.model.GetChainResponse;
import io.swagger.client.model.GetNativeBalanceResponse;
import io.swagger.client.model.GetTransactionResponse;
import io.swagger.client.model.ListBlocksResponse;
import io.swagger.client.model.ListChainsResponse;
import io.swagger.client.model.ListCollectibleBalancesResponse;
import io.swagger.client.model.ListErc1155BalancesResponse;
import io.swagger.client.model.ListErc1155TransactionsResponse;
import io.swagger.client.model.ListErc20BalancesResponse;
import io.swagger.client.model.ListErc20TransactionsResponse;
import io.swagger.client.model.ListErc721BalancesResponse;
import io.swagger.client.model.ListErc721TransactionsResponse;
import io.swagger.client.model.ListInternalTransactionsResponse;
import io.swagger.client.model.ListNativeTransactionsResponse;
import io.swagger.client.model.ListTransactionDetailsResponse;
import io.swagger.client.model.ListTransfersResponse;
import io.swagger.client.model.TransactionStatus;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for EvmApi
 */
@Ignore
public class EvmApiTest {

    private final EvmApi api = new EvmApi();

    /**
     * Returns the details of an individual block for the chain.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getBlockTest() throws Exception {
        String chainId = null;
        String blockId = null;
        GetBlockResponse response = api.getBlock(chainId, blockId);

        // TODO: test validations
    }
    /**
     * Gets chain information by chain id.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getChainInfoTest() throws Exception {
        String chainId = null;
        GetChainResponse response = api.getChainInfo(chainId);

        // TODO: test validations
    }
    /**
     * If the address is a smart contract, returns the transaction at which it was deployed.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDeploymentTransactionTest() throws Exception {
        String chainId = null;
        String address = null;
        CurrencyCode currency = null;
        GetTransactionResponse response = api.getDeploymentTransaction(chainId, address, currency);

        // TODO: test validations
    }
    /**
     * Returns the latest blocks indexed for the chain.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getLatestBlocksTest() throws Exception {
        String chainId = null;
        Integer pageSize = null;
        String pageToken = null;
        ListBlocksResponse response = api.getLatestBlocks(chainId, pageSize, pageToken);

        // TODO: test validations
    }
    /**
     * Get native token balance of a wallet address for a given chain.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getNativeBalanceTest() throws Exception {
        String chainId = null;
        String address = null;
        CurrencyCode currency = null;
        GetNativeBalanceResponse response = api.getNativeBalance(chainId, address, currency);

        // TODO: test validations
    }
    /**
     * Gets the details of a single transaction.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTransactionTest() throws Exception {
        String chainId = null;
        String txHash = null;
        GetTransactionResponse response = api.getTransaction(chainId, txHash);

        // TODO: test validations
    }
    /**
     * Gets the transactions that occured in a given block.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getTransactionsForBlockTest() throws Exception {
        String chainId = null;
        String blockId = null;
        ListNativeTransactionsResponse response = api.getTransactionsForBlock(chainId, blockId);

        // TODO: test validations
    }
    /**
     * List ERC-721 and ERC-1155 token balances of a wallet address         for a given chain.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listCollectibleBalancesTest() throws Exception {
        String chainId = null;
        String address = null;
        Integer pageSize = null;
        String pageToken = null;
        ListCollectibleBalancesResponse response = api.listCollectibleBalances(chainId, address, pageSize, pageToken);

        // TODO: test validations
    }
    /**
     * List ERC-1155 token balances of a wallet address for a given chain.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listErc1155BalancesTest() throws Exception {
        String chainId = null;
        String address = null;
        Integer pageSize = null;
        String pageToken = null;
        ListErc1155BalancesResponse response = api.listErc1155Balances(chainId, address, pageSize, pageToken);

        // TODO: test validations
    }
    /**
     * Lists of ERC-1155 transfers for an address.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listErc1155TransactionsTest() throws Exception {
        String chainId = null;
        String address = null;
        Integer pageSize = null;
        String pageToken = null;
        ListErc1155TransactionsResponse response = api.listErc1155Transactions(chainId, address, pageSize, pageToken);

        // TODO: test validations
    }
    /**
     * List ERC-20 token balances of a wallet address for a given chain.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listErc20BalancesTest() throws Exception {
        String chainId = null;
        String address = null;
        Integer pageSize = null;
        String pageToken = null;
        CurrencyCode currency = null;
        ListErc20BalancesResponse response = api.listErc20Balances(chainId, address, pageSize, pageToken, currency);

        // TODO: test validations
    }
    /**
     * Lists ERC-20 transfers for an address.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listErc20TransactionsTest() throws Exception {
        String chainId = null;
        String address = null;
        Integer pageSize = null;
        String pageToken = null;
        ListErc20TransactionsResponse response = api.listErc20Transactions(chainId, address, pageSize, pageToken);

        // TODO: test validations
    }
    /**
     * List ERC-721 token balances of a wallet address for a given chain.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listErc721BalancesTest() throws Exception {
        String chainId = null;
        String address = null;
        Integer pageSize = null;
        String pageToken = null;
        ListErc721BalancesResponse response = api.listErc721Balances(chainId, address, pageSize, pageToken);

        // TODO: test validations
    }
    /**
     * Lists ERC-721 transfers for an address.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listErc721TransactionsTest() throws Exception {
        String chainId = null;
        String address = null;
        Integer pageSize = null;
        String pageToken = null;
        ListErc721TransactionsResponse response = api.listErc721Transactions(chainId, address, pageSize, pageToken);

        // TODO: test validations
    }
    /**
     * Lists internal transactions for an address.
     *
     * Returns a list of internal transactions for an address and         chain. Note that the internal transactions list only contains CALL or         CALLCODE transactions with a non-zero value and CREATE/CREATE2         transactions. To get a complete list of internal transactions use the          &#x60;debug_&#x60; prefixed RPC methods on an archive node.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listInternalTransactionsTest() throws Exception {
        String chainId = null;
        String address = null;
        Integer pageSize = null;
        String pageToken = null;
        ListInternalTransactionsResponse response = api.listInternalTransactions(chainId, address, pageSize, pageToken);

        // TODO: test validations
    }
    /**
     * Gets the latest transactions; can be filtered by status.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listLatestTransactionsTest() throws Exception {
        String chainId = null;
        Integer pageSize = null;
        String pageToken = null;
        TransactionStatus status = null;
        ListNativeTransactionsResponse response = api.listLatestTransactions(chainId, pageSize, pageToken, status);

        // TODO: test validations
    }
    /**
     * Gets a list of native transactions for an address and chain.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listNativeTransactionsTest() throws Exception {
        String chainId = null;
        String address = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNativeTransactionsResponse response = api.listNativeTransactions(chainId, address, pageSize, pageToken);

        // TODO: test validations
    }
    /**
     * Gets a list of transactions for an address and chain.
     *
     * Returns a list of transactions where the given wallet         address had an on-chain interaction for a given chain. The ERC-20          transfers, ERC-721 transfers, ERC-1155, and internal transactions         returned are only those where the input address had an interaction.         Specifically, those list only inlcude entries where the input address         was the sender (&#x60;from&#x60; field) or the receiver (&#x60;to&#x60; field) for the         sub-transaction. Therefore the transactions returned from this list may         not be complete representations of the on-chain data. For a complete         view of a transaction use the &#x60;/chains/:chainId/transactions/:txHash&#x60;         endpoint.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listTransactionsTest() throws Exception {
        String chainId = null;
        String address = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTransactionDetailsResponse response = api.listTransactions(chainId, address, pageSize, pageToken);

        // TODO: test validations
    }
    /**
     * Gets a list of erc transfers for an ERC-20, ERC-721,         or ERC-1155 contract address.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listTransfersTest() throws Exception {
        String chainId = null;
        String address = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTransfersResponse response = api.listTransfers(chainId, address, pageSize, pageToken);

        // TODO: test validations
    }
    /**
     * Gets the list of chains supported by the api.
     *
     * 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void supportedChainsTest() throws Exception {
        ListChainsResponse response = api.supportedChains();

        // TODO: test validations
    }
}
