/*
 * Glacier API
 * The Glacier API provides web3 application developers with multi-chain        data related to Avalanche's primary network, Avalanche subnets, and        Ethereum. With Glacier, you can easily build products that leverage        real-time and historical transaction and transfer history, native and        token balances, and various types of token metadata. The API is in Beta        and may be subject to change.        </br></br>        If you have feedback or feature requests for the API, please submit them        <a href=\"https://portal.productboard.com/dndv9ahlkdfye4opdm8ksafi/tabs/4-glacier-api\">here</a>. Bug reports can be submitted        <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeJQrcp7QoNiqozMDKrVJGX5wpU827d3cVTgF8qa7t_J1Pb-g/viewform\">here</a>, and any potential security        issues can be reported <a href=\"https://hackenproof.com/avalanche\">here</a>.
 *
 * OpenAPI spec version: Beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;
import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets NftTokenMetadataStatus
 */
@JsonAdapter(NftTokenMetadataStatus.Adapter.class)
public enum NftTokenMetadataStatus {
  UNKNOWN("UNKNOWN"),
  MISSING_TOKEN("MISSING_TOKEN"),
  INVALID_TOKEN_URI("INVALID_TOKEN_URI"),
  INVALID_TOKEN_URI_SCHEME("INVALID_TOKEN_URI_SCHEME"),
  UNREACHABLE_TOKEN_URI("UNREACHABLE_TOKEN_URI"),
  THROTTLED_TOKEN_URI("THROTTLED_TOKEN_URI"),
  METADATA_CONTENT_TOO_LARGE("METADATA_CONTENT_TOO_LARGE"),
  INVALID_METADATA("INVALID_METADATA"),
  INVALID_METADATA_JSON("INVALID_METADATA_JSON"),
  INDEXED("INDEXED"),
  UNINDEXED("UNINDEXED");

  private String value;

  NftTokenMetadataStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static NftTokenMetadataStatus fromValue(String input) {
    for (NftTokenMetadataStatus b : NftTokenMetadataStatus.values()) {
      if (b.value.equals(input)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<NftTokenMetadataStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final NftTokenMetadataStatus enumeration) throws IOException {
      jsonWriter.value(String.valueOf(enumeration.getValue()));
    }

    @Override
    public NftTokenMetadataStatus read(final JsonReader jsonReader) throws IOException {
      Object value = jsonReader.nextString();
      return NftTokenMetadataStatus.fromValue((String)(value));
    }
  }
}
