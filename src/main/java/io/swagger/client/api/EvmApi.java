/*
 * Glacier API
 * The Glacier API provides web3 application developers with multi-chain        data related to Avalanche's primary network, Avalanche subnets, and        Ethereum. With Glacier, you can easily build products that leverage        real-time and historical transaction and transfer history, native and        token balances, and various types of token metadata. The API is in Beta        and may be subject to change.        </br></br>        If you have feedback or feature requests for the API, please submit them        <a href=\"https://portal.productboard.com/dndv9ahlkdfye4opdm8ksafi/tabs/4-glacier-api\">here</a>. Bug reports can be submitted        <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeJQrcp7QoNiqozMDKrVJGX5wpU827d3cVTgF8qa7t_J1Pb-g/viewform\">here</a>, and any potential security        issues can be reported <a href=\"https://hackenproof.com/avalanche\">here</a>.
 *
 * OpenAPI spec version: Beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CurrencyCode;
import io.swagger.client.model.GetBlockResponse;
import io.swagger.client.model.GetChainResponse;
import io.swagger.client.model.GetNativeBalanceResponse;
import io.swagger.client.model.GetTransactionResponse;
import io.swagger.client.model.ListBlocksResponse;
import io.swagger.client.model.ListChainsResponse;
import io.swagger.client.model.ListCollectibleBalancesResponse;
import io.swagger.client.model.ListErc1155BalancesResponse;
import io.swagger.client.model.ListErc1155TransactionsResponse;
import io.swagger.client.model.ListErc20BalancesResponse;
import io.swagger.client.model.ListErc20TransactionsResponse;
import io.swagger.client.model.ListErc721BalancesResponse;
import io.swagger.client.model.ListErc721TransactionsResponse;
import io.swagger.client.model.ListInternalTransactionsResponse;
import io.swagger.client.model.ListNativeTransactionsResponse;
import io.swagger.client.model.ListTransactionDetailsResponse;
import io.swagger.client.model.ListTransfersResponse;
import io.swagger.client.model.TransactionStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EvmApi {
    private ApiClient apiClient;

    public EvmApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EvmApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getBlock
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param blockId A block identifier which is either a block number or the block hash. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBlockCall(String chainId, String blockId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/blocks/{blockId}"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "blockId" + "\\}", apiClient.escapeString(blockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBlockValidateBeforeCall(String chainId, String blockId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getBlock(Async)");
        }
        // verify the required parameter 'blockId' is set
        if (blockId == null) {
            throw new ApiException("Missing the required parameter 'blockId' when calling getBlock(Async)");
        }
        
        com.squareup.okhttp.Call call = getBlockCall(chainId, blockId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns the details of an individual block for the chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param blockId A block identifier which is either a block number or the block hash. (required)
     * @return GetBlockResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetBlockResponse getBlock(String chainId, String blockId) throws ApiException {
        ApiResponse<GetBlockResponse> resp = getBlockWithHttpInfo(chainId, blockId);
        return resp.getData();
    }

    /**
     * Returns the details of an individual block for the chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param blockId A block identifier which is either a block number or the block hash. (required)
     * @return ApiResponse&lt;GetBlockResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetBlockResponse> getBlockWithHttpInfo(String chainId, String blockId) throws ApiException {
        com.squareup.okhttp.Call call = getBlockValidateBeforeCall(chainId, blockId, null, null);
        Type localVarReturnType = new TypeToken<GetBlockResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the details of an individual block for the chain. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param blockId A block identifier which is either a block number or the block hash. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBlockAsync(String chainId, String blockId, final ApiCallback<GetBlockResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBlockValidateBeforeCall(chainId, blockId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetBlockResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChainInfo
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChainInfoCall(String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChainInfoValidateBeforeCall(String chainId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getChainInfo(Async)");
        }
        
        com.squareup.okhttp.Call call = getChainInfoCall(chainId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets chain information by chain id.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @return GetChainResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetChainResponse getChainInfo(String chainId) throws ApiException {
        ApiResponse<GetChainResponse> resp = getChainInfoWithHttpInfo(chainId);
        return resp.getData();
    }

    /**
     * Gets chain information by chain id.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @return ApiResponse&lt;GetChainResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetChainResponse> getChainInfoWithHttpInfo(String chainId) throws ApiException {
        com.squareup.okhttp.Call call = getChainInfoValidateBeforeCall(chainId, null, null);
        Type localVarReturnType = new TypeToken<GetChainResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets chain information by chain id. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChainInfoAsync(String chainId, final ApiCallback<GetChainResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChainInfoValidateBeforeCall(chainId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetChainResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDeploymentTransaction
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address Contract address on the relevant chain. (required)
     * @param currency The currency that return values should use. Defaults to USD. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDeploymentTransactionCall(String chainId, String address, CurrencyCode currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/contracts/{address}/transactions:getDeployment"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency", currency));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDeploymentTransactionValidateBeforeCall(String chainId, String address, CurrencyCode currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getDeploymentTransaction(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getDeploymentTransaction(Async)");
        }
        
        com.squareup.okhttp.Call call = getDeploymentTransactionCall(chainId, address, currency, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * If the address is a smart contract, returns the transaction at which it was deployed.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address Contract address on the relevant chain. (required)
     * @param currency The currency that return values should use. Defaults to USD. (optional)
     * @return GetTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTransactionResponse getDeploymentTransaction(String chainId, String address, CurrencyCode currency) throws ApiException {
        ApiResponse<GetTransactionResponse> resp = getDeploymentTransactionWithHttpInfo(chainId, address, currency);
        return resp.getData();
    }

    /**
     * If the address is a smart contract, returns the transaction at which it was deployed.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address Contract address on the relevant chain. (required)
     * @param currency The currency that return values should use. Defaults to USD. (optional)
     * @return ApiResponse&lt;GetTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTransactionResponse> getDeploymentTransactionWithHttpInfo(String chainId, String address, CurrencyCode currency) throws ApiException {
        com.squareup.okhttp.Call call = getDeploymentTransactionValidateBeforeCall(chainId, address, currency, null, null);
        Type localVarReturnType = new TypeToken<GetTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * If the address is a smart contract, returns the transaction at which it was deployed. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address Contract address on the relevant chain. (required)
     * @param currency The currency that return values should use. Defaults to USD. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDeploymentTransactionAsync(String chainId, String address, CurrencyCode currency, final ApiCallback<GetTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDeploymentTransactionValidateBeforeCall(chainId, address, currency, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLatestBlocks
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLatestBlocksCall(String chainId, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/blocks"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLatestBlocksValidateBeforeCall(String chainId, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getLatestBlocks(Async)");
        }
        
        com.squareup.okhttp.Call call = getLatestBlocksCall(chainId, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns the latest blocks indexed for the chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListBlocksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListBlocksResponse getLatestBlocks(String chainId, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListBlocksResponse> resp = getLatestBlocksWithHttpInfo(chainId, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Returns the latest blocks indexed for the chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListBlocksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListBlocksResponse> getLatestBlocksWithHttpInfo(String chainId, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = getLatestBlocksValidateBeforeCall(chainId, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListBlocksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the latest blocks indexed for the chain. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLatestBlocksAsync(String chainId, Integer pageSize, String pageToken, final ApiCallback<ListBlocksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLatestBlocksValidateBeforeCall(chainId, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListBlocksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNativeBalance
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param currency The currency that return values should use. Defaults to USD. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNativeBalanceCall(String chainId, String address, CurrencyCode currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/addresses/{address}/balances:getNative"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency", currency));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNativeBalanceValidateBeforeCall(String chainId, String address, CurrencyCode currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getNativeBalance(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getNativeBalance(Async)");
        }
        
        com.squareup.okhttp.Call call = getNativeBalanceCall(chainId, address, currency, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get native token balance of a wallet address for a given chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param currency The currency that return values should use. Defaults to USD. (optional)
     * @return GetNativeBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetNativeBalanceResponse getNativeBalance(String chainId, String address, CurrencyCode currency) throws ApiException {
        ApiResponse<GetNativeBalanceResponse> resp = getNativeBalanceWithHttpInfo(chainId, address, currency);
        return resp.getData();
    }

    /**
     * Get native token balance of a wallet address for a given chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param currency The currency that return values should use. Defaults to USD. (optional)
     * @return ApiResponse&lt;GetNativeBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetNativeBalanceResponse> getNativeBalanceWithHttpInfo(String chainId, String address, CurrencyCode currency) throws ApiException {
        com.squareup.okhttp.Call call = getNativeBalanceValidateBeforeCall(chainId, address, currency, null, null);
        Type localVarReturnType = new TypeToken<GetNativeBalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get native token balance of a wallet address for a given chain. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param currency The currency that return values should use. Defaults to USD. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNativeBalanceAsync(String chainId, String address, CurrencyCode currency, final ApiCallback<GetNativeBalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNativeBalanceValidateBeforeCall(chainId, address, currency, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetNativeBalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransaction
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param txHash A transaction hash. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionCall(String chainId, String txHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/transactions/{txHash}"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "txHash" + "\\}", apiClient.escapeString(txHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionValidateBeforeCall(String chainId, String txHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getTransaction(Async)");
        }
        // verify the required parameter 'txHash' is set
        if (txHash == null) {
            throw new ApiException("Missing the required parameter 'txHash' when calling getTransaction(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransactionCall(chainId, txHash, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the details of a single transaction.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param txHash A transaction hash. (required)
     * @return GetTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetTransactionResponse getTransaction(String chainId, String txHash) throws ApiException {
        ApiResponse<GetTransactionResponse> resp = getTransactionWithHttpInfo(chainId, txHash);
        return resp.getData();
    }

    /**
     * Gets the details of a single transaction.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param txHash A transaction hash. (required)
     * @return ApiResponse&lt;GetTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetTransactionResponse> getTransactionWithHttpInfo(String chainId, String txHash) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionValidateBeforeCall(chainId, txHash, null, null);
        Type localVarReturnType = new TypeToken<GetTransactionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the details of a single transaction. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param txHash A transaction hash. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionAsync(String chainId, String txHash, final ApiCallback<GetTransactionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionValidateBeforeCall(chainId, txHash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetTransactionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionsForBlock
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param blockId A block identifier which is either a block number or the block hash. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsForBlockCall(String chainId, String blockId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/blocks/{blockId}/transactions"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "blockId" + "\\}", apiClient.escapeString(blockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsForBlockValidateBeforeCall(String chainId, String blockId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling getTransactionsForBlock(Async)");
        }
        // verify the required parameter 'blockId' is set
        if (blockId == null) {
            throw new ApiException("Missing the required parameter 'blockId' when calling getTransactionsForBlock(Async)");
        }
        
        com.squareup.okhttp.Call call = getTransactionsForBlockCall(chainId, blockId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the transactions that occured in a given block.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param blockId A block identifier which is either a block number or the block hash. (required)
     * @return ListNativeTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListNativeTransactionsResponse getTransactionsForBlock(String chainId, String blockId) throws ApiException {
        ApiResponse<ListNativeTransactionsResponse> resp = getTransactionsForBlockWithHttpInfo(chainId, blockId);
        return resp.getData();
    }

    /**
     * Gets the transactions that occured in a given block.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param blockId A block identifier which is either a block number or the block hash. (required)
     * @return ApiResponse&lt;ListNativeTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListNativeTransactionsResponse> getTransactionsForBlockWithHttpInfo(String chainId, String blockId) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsForBlockValidateBeforeCall(chainId, blockId, null, null);
        Type localVarReturnType = new TypeToken<ListNativeTransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the transactions that occured in a given block. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param blockId A block identifier which is either a block number or the block hash. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsForBlockAsync(String chainId, String blockId, final ApiCallback<ListNativeTransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsForBlockValidateBeforeCall(chainId, blockId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListNativeTransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listCollectibleBalances
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCollectibleBalancesCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/addresses/{address}/balances:listCollectibles"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCollectibleBalancesValidateBeforeCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling listCollectibleBalances(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling listCollectibleBalances(Async)");
        }
        
        com.squareup.okhttp.Call call = listCollectibleBalancesCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List ERC-721 and ERC-1155 token balances of a wallet address         for a given chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListCollectibleBalancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListCollectibleBalancesResponse listCollectibleBalances(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListCollectibleBalancesResponse> resp = listCollectibleBalancesWithHttpInfo(chainId, address, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * List ERC-721 and ERC-1155 token balances of a wallet address         for a given chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListCollectibleBalancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListCollectibleBalancesResponse> listCollectibleBalancesWithHttpInfo(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listCollectibleBalancesValidateBeforeCall(chainId, address, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListCollectibleBalancesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List ERC-721 and ERC-1155 token balances of a wallet address         for a given chain. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCollectibleBalancesAsync(String chainId, String address, Integer pageSize, String pageToken, final ApiCallback<ListCollectibleBalancesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCollectibleBalancesValidateBeforeCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListCollectibleBalancesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listErc1155Balances
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listErc1155BalancesCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/addresses/{address}/balances:listErc1155"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listErc1155BalancesValidateBeforeCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling listErc1155Balances(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling listErc1155Balances(Async)");
        }
        
        com.squareup.okhttp.Call call = listErc1155BalancesCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List ERC-1155 token balances of a wallet address for a given chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListErc1155BalancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListErc1155BalancesResponse listErc1155Balances(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListErc1155BalancesResponse> resp = listErc1155BalancesWithHttpInfo(chainId, address, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * List ERC-1155 token balances of a wallet address for a given chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListErc1155BalancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListErc1155BalancesResponse> listErc1155BalancesWithHttpInfo(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listErc1155BalancesValidateBeforeCall(chainId, address, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListErc1155BalancesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List ERC-1155 token balances of a wallet address for a given chain. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listErc1155BalancesAsync(String chainId, String address, Integer pageSize, String pageToken, final ApiCallback<ListErc1155BalancesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listErc1155BalancesValidateBeforeCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListErc1155BalancesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listErc1155Transactions
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listErc1155TransactionsCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/addresses/{address}/transactions:listErc1155"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listErc1155TransactionsValidateBeforeCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling listErc1155Transactions(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling listErc1155Transactions(Async)");
        }
        
        com.squareup.okhttp.Call call = listErc1155TransactionsCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists of ERC-1155 transfers for an address.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListErc1155TransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListErc1155TransactionsResponse listErc1155Transactions(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListErc1155TransactionsResponse> resp = listErc1155TransactionsWithHttpInfo(chainId, address, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Lists of ERC-1155 transfers for an address.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListErc1155TransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListErc1155TransactionsResponse> listErc1155TransactionsWithHttpInfo(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listErc1155TransactionsValidateBeforeCall(chainId, address, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListErc1155TransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists of ERC-1155 transfers for an address. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listErc1155TransactionsAsync(String chainId, String address, Integer pageSize, String pageToken, final ApiCallback<ListErc1155TransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listErc1155TransactionsValidateBeforeCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListErc1155TransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listErc20Balances
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param currency The currency that return values should use. Defaults to USD. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listErc20BalancesCall(String chainId, String address, Integer pageSize, String pageToken, CurrencyCode currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/addresses/{address}/balances:listErc20"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));
        if (currency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("currency", currency));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listErc20BalancesValidateBeforeCall(String chainId, String address, Integer pageSize, String pageToken, CurrencyCode currency, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling listErc20Balances(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling listErc20Balances(Async)");
        }
        
        com.squareup.okhttp.Call call = listErc20BalancesCall(chainId, address, pageSize, pageToken, currency, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List ERC-20 token balances of a wallet address for a given chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param currency The currency that return values should use. Defaults to USD. (optional)
     * @return ListErc20BalancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListErc20BalancesResponse listErc20Balances(String chainId, String address, Integer pageSize, String pageToken, CurrencyCode currency) throws ApiException {
        ApiResponse<ListErc20BalancesResponse> resp = listErc20BalancesWithHttpInfo(chainId, address, pageSize, pageToken, currency);
        return resp.getData();
    }

    /**
     * List ERC-20 token balances of a wallet address for a given chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param currency The currency that return values should use. Defaults to USD. (optional)
     * @return ApiResponse&lt;ListErc20BalancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListErc20BalancesResponse> listErc20BalancesWithHttpInfo(String chainId, String address, Integer pageSize, String pageToken, CurrencyCode currency) throws ApiException {
        com.squareup.okhttp.Call call = listErc20BalancesValidateBeforeCall(chainId, address, pageSize, pageToken, currency, null, null);
        Type localVarReturnType = new TypeToken<ListErc20BalancesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List ERC-20 token balances of a wallet address for a given chain. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param currency The currency that return values should use. Defaults to USD. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listErc20BalancesAsync(String chainId, String address, Integer pageSize, String pageToken, CurrencyCode currency, final ApiCallback<ListErc20BalancesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listErc20BalancesValidateBeforeCall(chainId, address, pageSize, pageToken, currency, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListErc20BalancesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listErc20Transactions
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listErc20TransactionsCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/addresses/{address}/transactions:listErc20"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listErc20TransactionsValidateBeforeCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling listErc20Transactions(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling listErc20Transactions(Async)");
        }
        
        com.squareup.okhttp.Call call = listErc20TransactionsCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists ERC-20 transfers for an address.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListErc20TransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListErc20TransactionsResponse listErc20Transactions(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListErc20TransactionsResponse> resp = listErc20TransactionsWithHttpInfo(chainId, address, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Lists ERC-20 transfers for an address.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListErc20TransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListErc20TransactionsResponse> listErc20TransactionsWithHttpInfo(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listErc20TransactionsValidateBeforeCall(chainId, address, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListErc20TransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists ERC-20 transfers for an address. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listErc20TransactionsAsync(String chainId, String address, Integer pageSize, String pageToken, final ApiCallback<ListErc20TransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listErc20TransactionsValidateBeforeCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListErc20TransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listErc721Balances
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listErc721BalancesCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/addresses/{address}/balances:listErc721"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listErc721BalancesValidateBeforeCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling listErc721Balances(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling listErc721Balances(Async)");
        }
        
        com.squareup.okhttp.Call call = listErc721BalancesCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List ERC-721 token balances of a wallet address for a given chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListErc721BalancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListErc721BalancesResponse listErc721Balances(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListErc721BalancesResponse> resp = listErc721BalancesWithHttpInfo(chainId, address, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * List ERC-721 token balances of a wallet address for a given chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListErc721BalancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListErc721BalancesResponse> listErc721BalancesWithHttpInfo(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listErc721BalancesValidateBeforeCall(chainId, address, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListErc721BalancesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List ERC-721 token balances of a wallet address for a given chain. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listErc721BalancesAsync(String chainId, String address, Integer pageSize, String pageToken, final ApiCallback<ListErc721BalancesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listErc721BalancesValidateBeforeCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListErc721BalancesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listErc721Transactions
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listErc721TransactionsCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/addresses/{address}/transactions:listErc721"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listErc721TransactionsValidateBeforeCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling listErc721Transactions(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling listErc721Transactions(Async)");
        }
        
        com.squareup.okhttp.Call call = listErc721TransactionsCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists ERC-721 transfers for an address.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListErc721TransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListErc721TransactionsResponse listErc721Transactions(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListErc721TransactionsResponse> resp = listErc721TransactionsWithHttpInfo(chainId, address, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Lists ERC-721 transfers for an address.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListErc721TransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListErc721TransactionsResponse> listErc721TransactionsWithHttpInfo(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listErc721TransactionsValidateBeforeCall(chainId, address, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListErc721TransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists ERC-721 transfers for an address. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listErc721TransactionsAsync(String chainId, String address, Integer pageSize, String pageToken, final ApiCallback<ListErc721TransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listErc721TransactionsValidateBeforeCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListErc721TransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listInternalTransactions
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listInternalTransactionsCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/addresses/{address}/transactions:listInternals"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listInternalTransactionsValidateBeforeCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling listInternalTransactions(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling listInternalTransactions(Async)");
        }
        
        com.squareup.okhttp.Call call = listInternalTransactionsCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists internal transactions for an address.
     * Returns a list of internal transactions for an address and         chain. Note that the internal transactions list only contains CALL or         CALLCODE transactions with a non-zero value and CREATE/CREATE2         transactions. To get a complete list of internal transactions use the          &#x60;debug_&#x60; prefixed RPC methods on an archive node.
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListInternalTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListInternalTransactionsResponse listInternalTransactions(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListInternalTransactionsResponse> resp = listInternalTransactionsWithHttpInfo(chainId, address, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Lists internal transactions for an address.
     * Returns a list of internal transactions for an address and         chain. Note that the internal transactions list only contains CALL or         CALLCODE transactions with a non-zero value and CREATE/CREATE2         transactions. To get a complete list of internal transactions use the          &#x60;debug_&#x60; prefixed RPC methods on an archive node.
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListInternalTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListInternalTransactionsResponse> listInternalTransactionsWithHttpInfo(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listInternalTransactionsValidateBeforeCall(chainId, address, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListInternalTransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists internal transactions for an address. (asynchronously)
     * Returns a list of internal transactions for an address and         chain. Note that the internal transactions list only contains CALL or         CALLCODE transactions with a non-zero value and CREATE/CREATE2         transactions. To get a complete list of internal transactions use the          &#x60;debug_&#x60; prefixed RPC methods on an archive node.
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listInternalTransactionsAsync(String chainId, String address, Integer pageSize, String pageToken, final ApiCallback<ListInternalTransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listInternalTransactionsValidateBeforeCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListInternalTransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLatestTransactions
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param status A status filter for listed transactions. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLatestTransactionsCall(String chainId, Integer pageSize, String pageToken, TransactionStatus status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/transactions"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLatestTransactionsValidateBeforeCall(String chainId, Integer pageSize, String pageToken, TransactionStatus status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling listLatestTransactions(Async)");
        }
        
        com.squareup.okhttp.Call call = listLatestTransactionsCall(chainId, pageSize, pageToken, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the latest transactions; can be filtered by status.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param status A status filter for listed transactions. (optional)
     * @return ListNativeTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListNativeTransactionsResponse listLatestTransactions(String chainId, Integer pageSize, String pageToken, TransactionStatus status) throws ApiException {
        ApiResponse<ListNativeTransactionsResponse> resp = listLatestTransactionsWithHttpInfo(chainId, pageSize, pageToken, status);
        return resp.getData();
    }

    /**
     * Gets the latest transactions; can be filtered by status.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param status A status filter for listed transactions. (optional)
     * @return ApiResponse&lt;ListNativeTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListNativeTransactionsResponse> listLatestTransactionsWithHttpInfo(String chainId, Integer pageSize, String pageToken, TransactionStatus status) throws ApiException {
        com.squareup.okhttp.Call call = listLatestTransactionsValidateBeforeCall(chainId, pageSize, pageToken, status, null, null);
        Type localVarReturnType = new TypeToken<ListNativeTransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the latest transactions; can be filtered by status. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param status A status filter for listed transactions. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLatestTransactionsAsync(String chainId, Integer pageSize, String pageToken, TransactionStatus status, final ApiCallback<ListNativeTransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLatestTransactionsValidateBeforeCall(chainId, pageSize, pageToken, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListNativeTransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listNativeTransactions
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listNativeTransactionsCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/addresses/{address}/transactions:listNative"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listNativeTransactionsValidateBeforeCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling listNativeTransactions(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling listNativeTransactions(Async)");
        }
        
        com.squareup.okhttp.Call call = listNativeTransactionsCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a list of native transactions for an address and chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListNativeTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListNativeTransactionsResponse listNativeTransactions(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListNativeTransactionsResponse> resp = listNativeTransactionsWithHttpInfo(chainId, address, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Gets a list of native transactions for an address and chain.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListNativeTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListNativeTransactionsResponse> listNativeTransactionsWithHttpInfo(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listNativeTransactionsValidateBeforeCall(chainId, address, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListNativeTransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of native transactions for an address and chain. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listNativeTransactionsAsync(String chainId, String address, Integer pageSize, String pageToken, final ApiCallback<ListNativeTransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listNativeTransactionsValidateBeforeCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListNativeTransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransactions
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransactionsCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/addresses/{address}/transactions"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransactionsValidateBeforeCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling listTransactions(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling listTransactions(Async)");
        }
        
        com.squareup.okhttp.Call call = listTransactionsCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a list of transactions for an address and chain.
     * Returns a list of transactions where the given wallet         address had an on-chain interaction for a given chain. The ERC-20          transfers, ERC-721 transfers, ERC-1155, and internal transactions         returned are only those where the input address had an interaction.         Specifically, those list only inlcude entries where the input address         was the sender (&#x60;from&#x60; field) or the receiver (&#x60;to&#x60; field) for the         sub-transaction. Therefore the transactions returned from this list may         not be complete representations of the on-chain data. For a complete         view of a transaction use the &#x60;/chains/:chainId/transactions/:txHash&#x60;         endpoint.
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListTransactionDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListTransactionDetailsResponse listTransactions(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListTransactionDetailsResponse> resp = listTransactionsWithHttpInfo(chainId, address, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Gets a list of transactions for an address and chain.
     * Returns a list of transactions where the given wallet         address had an on-chain interaction for a given chain. The ERC-20          transfers, ERC-721 transfers, ERC-1155, and internal transactions         returned are only those where the input address had an interaction.         Specifically, those list only inlcude entries where the input address         was the sender (&#x60;from&#x60; field) or the receiver (&#x60;to&#x60; field) for the         sub-transaction. Therefore the transactions returned from this list may         not be complete representations of the on-chain data. For a complete         view of a transaction use the &#x60;/chains/:chainId/transactions/:txHash&#x60;         endpoint.
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListTransactionDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListTransactionDetailsResponse> listTransactionsWithHttpInfo(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listTransactionsValidateBeforeCall(chainId, address, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListTransactionDetailsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of transactions for an address and chain. (asynchronously)
     * Returns a list of transactions where the given wallet         address had an on-chain interaction for a given chain. The ERC-20          transfers, ERC-721 transfers, ERC-1155, and internal transactions         returned are only those where the input address had an interaction.         Specifically, those list only inlcude entries where the input address         was the sender (&#x60;from&#x60; field) or the receiver (&#x60;to&#x60; field) for the         sub-transaction. Therefore the transactions returned from this list may         not be complete representations of the on-chain data. For a complete         view of a transaction use the &#x60;/chains/:chainId/transactions/:txHash&#x60;         endpoint.
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransactionsAsync(String chainId, String address, Integer pageSize, String pageToken, final ApiCallback<ListTransactionDetailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransactionsValidateBeforeCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListTransactionDetailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTransfers
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTransfersCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains/{chainId}/tokens/{address}/transfers"
            .replaceAll("\\{" + "chainId" + "\\}", apiClient.escapeString(chainId.toString()))
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTransfersValidateBeforeCall(String chainId, String address, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'chainId' is set
        if (chainId == null) {
            throw new ApiException("Missing the required parameter 'chainId' when calling listTransfers(Async)");
        }
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling listTransfers(Async)");
        }
        
        com.squareup.okhttp.Call call = listTransfersCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets a list of erc transfers for an ERC-20, ERC-721,         or ERC-1155 contract address.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListTransfersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListTransfersResponse listTransfers(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListTransfersResponse> resp = listTransfersWithHttpInfo(chainId, address, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Gets a list of erc transfers for an ERC-20, ERC-721,         or ERC-1155 contract address.
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListTransfersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListTransfersResponse> listTransfersWithHttpInfo(String chainId, String address, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listTransfersValidateBeforeCall(chainId, address, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListTransfersResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of erc transfers for an ERC-20, ERC-721,         or ERC-1155 contract address. (asynchronously)
     * 
     * @param chainId A supported evm chain id. Use the &#x60;/chains&#x60; endpoint to get        a list of supported chain ids. (required)
     * @param address A wallet address. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTransfersAsync(String chainId, String address, Integer pageSize, String pageToken, final ApiCallback<ListTransfersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTransfersValidateBeforeCall(chainId, address, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListTransfersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for supportedChains
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call supportedChainsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/chains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call supportedChainsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = supportedChainsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Gets the list of chains supported by the api.
     * 
     * @return ListChainsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListChainsResponse supportedChains() throws ApiException {
        ApiResponse<ListChainsResponse> resp = supportedChainsWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets the list of chains supported by the api.
     * 
     * @return ApiResponse&lt;ListChainsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListChainsResponse> supportedChainsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = supportedChainsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<ListChainsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the list of chains supported by the api. (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call supportedChainsAsync(final ApiCallback<ListChainsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = supportedChainsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListChainsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
