/*
 * Glacier API
 * The Glacier API provides web3 application developers with multi-chain        data related to Avalanche's primary network, Avalanche subnets, and        Ethereum. With Glacier, you can easily build products that leverage        real-time and historical transaction and transfer history, native and        token balances, and various types of token metadata. The API is in Beta        and may be subject to change.        </br></br>        If you have feedback or feature requests for the API, please submit them        <a href=\"https://portal.productboard.com/dndv9ahlkdfye4opdm8ksafi/tabs/4-glacier-api\">here</a>. Bug reports can be submitted        <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSeJQrcp7QoNiqozMDKrVJGX5wpU827d3cVTgF8qa7t_J1Pb-g/viewform\">here</a>, and any potential security        issues can be reported <a href=\"https://hackenproof.com/avalanche\">here</a>.
 *
 * OpenAPI spec version: Beta
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Block;
import io.swagger.client.model.BlockchainId;
import io.swagger.client.model.ChainAddressChainIdMapListResponse;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2003;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.ListBlocksResponse;
import io.swagger.client.model.ListPChainTransactionsResponse;
import io.swagger.client.model.ListXChainTransactionsResponse;
import io.swagger.client.model.ListXChainVerticesResponse;
import io.swagger.client.model.Network;
import io.swagger.client.model.PChainId;
import io.swagger.client.model.SortOrder;
import io.swagger.client.model.XChainAssetDetails;
import io.swagger.client.model.XChainId;
import io.swagger.client.model.XChainVertex;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrimaryNetworkApi {
    private ApiClient apiClient;

    public PrimaryNetworkApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrimaryNetworkApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAssetDetails
     * @param assetId Asset ID for any asset on X-Chain (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAssetDetailsCall(String assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/blockchains/{blockchainId}/assets/{assetId}"
            .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAssetDetailsValidateBeforeCall(String assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling getAssetDetails(Async)");
        }
        
        com.squareup.okhttp.Call call = getAssetDetailsCall(assetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns asset details corresponding to the asset id on X-Chain.
     * 
     * @param assetId Asset ID for any asset on X-Chain (required)
     * @return XChainAssetDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XChainAssetDetails getAssetDetails(String assetId) throws ApiException {
        ApiResponse<XChainAssetDetails> resp = getAssetDetailsWithHttpInfo(assetId);
        return resp.getData();
    }

    /**
     * Returns asset details corresponding to the asset id on X-Chain.
     * 
     * @param assetId Asset ID for any asset on X-Chain (required)
     * @return ApiResponse&lt;XChainAssetDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XChainAssetDetails> getAssetDetailsWithHttpInfo(String assetId) throws ApiException {
        com.squareup.okhttp.Call call = getAssetDetailsValidateBeforeCall(assetId, null, null);
        Type localVarReturnType = new TypeToken<XChainAssetDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns asset details corresponding to the asset id on X-Chain. (asynchronously)
     * 
     * @param assetId Asset ID for any asset on X-Chain (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAssetDetailsAsync(String assetId, final ApiCallback<XChainAssetDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAssetDetailsValidateBeforeCall(assetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XChainAssetDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAssetTransactions
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param assetId Asset ID for any asset on X-Chain (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAssetTransactionsCall(XChainId blockchainId, Network network, String assetId, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/blockchains/{blockchainId}/assets/{assetId}/transactions"
            .replaceAll("\\{" + "blockchainId" + "\\}", apiClient.escapeString(blockchainId.toString()))
            .replaceAll("\\{" + "network" + "\\}", apiClient.escapeString(network.toString()))
            .replaceAll("\\{" + "assetId" + "\\}", apiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAssetTransactionsValidateBeforeCall(XChainId blockchainId, Network network, String assetId, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockchainId' is set
        if (blockchainId == null) {
            throw new ApiException("Missing the required parameter 'blockchainId' when calling getAssetTransactions(Async)");
        }
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling getAssetTransactions(Async)");
        }
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling getAssetTransactions(Async)");
        }
        
        com.squareup.okhttp.Call call = getAssetTransactionsCall(blockchainId, network, assetId, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns asset transactions corresponding to the asset id on X-Chain.
     * 
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param assetId Asset ID for any asset on X-Chain (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListXChainTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListXChainTransactionsResponse getAssetTransactions(XChainId blockchainId, Network network, String assetId, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListXChainTransactionsResponse> resp = getAssetTransactionsWithHttpInfo(blockchainId, network, assetId, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Returns asset transactions corresponding to the asset id on X-Chain.
     * 
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param assetId Asset ID for any asset on X-Chain (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListXChainTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListXChainTransactionsResponse> getAssetTransactionsWithHttpInfo(XChainId blockchainId, Network network, String assetId, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = getAssetTransactionsValidateBeforeCall(blockchainId, network, assetId, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListXChainTransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns asset transactions corresponding to the asset id on X-Chain. (asynchronously)
     * 
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param assetId Asset ID for any asset on X-Chain (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAssetTransactionsAsync(XChainId blockchainId, Network network, String assetId, Integer pageSize, String pageToken, final ApiCallback<ListXChainTransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAssetTransactionsValidateBeforeCall(blockchainId, network, assetId, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListXChainTransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBalancesByAddresses
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBalancesByAddressesCall(BlockchainId blockchainId, Network network, String addresses, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/blockchains/{blockchainId}/balances"
            .replaceAll("\\{" + "blockchainId" + "\\}", apiClient.escapeString(blockchainId.toString()))
            .replaceAll("\\{" + "network" + "\\}", apiClient.escapeString(network.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addresses != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addresses", addresses));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBalancesByAddressesValidateBeforeCall(BlockchainId blockchainId, Network network, String addresses, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockchainId' is set
        if (blockchainId == null) {
            throw new ApiException("Missing the required parameter 'blockchainId' when calling getBalancesByAddresses(Async)");
        }
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling getBalancesByAddresses(Async)");
        }
        
        com.squareup.okhttp.Call call = getBalancesByAddressesCall(blockchainId, network, addresses, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns balance for P-Chain, X-Chain, and C-Chain (only shared memory balance for C-Chain).
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 getBalancesByAddresses(BlockchainId blockchainId, Network network, String addresses) throws ApiException {
        ApiResponse<InlineResponse2004> resp = getBalancesByAddressesWithHttpInfo(blockchainId, network, addresses);
        return resp.getData();
    }

    /**
     * Returns balance for P-Chain, X-Chain, and C-Chain (only shared memory balance for C-Chain).
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> getBalancesByAddressesWithHttpInfo(BlockchainId blockchainId, Network network, String addresses) throws ApiException {
        com.squareup.okhttp.Call call = getBalancesByAddressesValidateBeforeCall(blockchainId, network, addresses, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns balance for P-Chain, X-Chain, and C-Chain (only shared memory balance for C-Chain). (asynchronously)
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBalancesByAddressesAsync(BlockchainId blockchainId, Network network, String addresses, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBalancesByAddressesValidateBeforeCall(blockchainId, network, addresses, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBlockById
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param blockId A block identifier which is either a block number or the block hash. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBlockByIdCall(BlockchainId blockchainId, Network network, String blockId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/blockchains/{blockchainId}/blocks/{blockId}"
            .replaceAll("\\{" + "blockchainId" + "\\}", apiClient.escapeString(blockchainId.toString()))
            .replaceAll("\\{" + "network" + "\\}", apiClient.escapeString(network.toString()))
            .replaceAll("\\{" + "blockId" + "\\}", apiClient.escapeString(blockId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBlockByIdValidateBeforeCall(BlockchainId blockchainId, Network network, String blockId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockchainId' is set
        if (blockchainId == null) {
            throw new ApiException("Missing the required parameter 'blockchainId' when calling getBlockById(Async)");
        }
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling getBlockById(Async)");
        }
        // verify the required parameter 'blockId' is set
        if (blockId == null) {
            throw new ApiException("Missing the required parameter 'blockId' when calling getBlockById(Async)");
        }
        
        com.squareup.okhttp.Call call = getBlockByIdCall(blockchainId, network, blockId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns block by block_height or block_hash on P-Chain, X-Chain (Cortina), C-Chain (hexadecimal for C-Chain).
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param blockId A block identifier which is either a block number or the block hash. (required)
     * @return Block
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Block getBlockById(BlockchainId blockchainId, Network network, String blockId) throws ApiException {
        ApiResponse<Block> resp = getBlockByIdWithHttpInfo(blockchainId, network, blockId);
        return resp.getData();
    }

    /**
     * Returns block by block_height or block_hash on P-Chain, X-Chain (Cortina), C-Chain (hexadecimal for C-Chain).
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param blockId A block identifier which is either a block number or the block hash. (required)
     * @return ApiResponse&lt;Block&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Block> getBlockByIdWithHttpInfo(BlockchainId blockchainId, Network network, String blockId) throws ApiException {
        com.squareup.okhttp.Call call = getBlockByIdValidateBeforeCall(blockchainId, network, blockId, null, null);
        Type localVarReturnType = new TypeToken<Block>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns block by block_height or block_hash on P-Chain, X-Chain (Cortina), C-Chain (hexadecimal for C-Chain). (asynchronously)
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param blockId A block identifier which is either a block number or the block hash. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBlockByIdAsync(BlockchainId blockchainId, Network network, String blockId, final ApiCallback<Block> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBlockByIdValidateBeforeCall(blockchainId, network, blockId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Block>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChainAddresses
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (required)
     * @param network Either mainnet or a testnet. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChainAddressesCall(String addresses, Network network, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/addresses:listChainIds"
            .replaceAll("\\{" + "network" + "\\}", apiClient.escapeString(network.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addresses != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addresses", addresses));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChainAddressesValidateBeforeCall(String addresses, Network network, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'addresses' is set
        if (addresses == null) {
            throw new ApiException("Missing the required parameter 'addresses' when calling getChainAddresses(Async)");
        }
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling getChainAddresses(Async)");
        }
        
        com.squareup.okhttp.Call call = getChainAddressesCall(addresses, network, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Return all address-mapped chain IDs that an address has been seen on chain before.
     * 
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (required)
     * @param network Either mainnet or a testnet. (required)
     * @return ChainAddressChainIdMapListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ChainAddressChainIdMapListResponse getChainAddresses(String addresses, Network network) throws ApiException {
        ApiResponse<ChainAddressChainIdMapListResponse> resp = getChainAddressesWithHttpInfo(addresses, network);
        return resp.getData();
    }

    /**
     * Return all address-mapped chain IDs that an address has been seen on chain before.
     * 
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (required)
     * @param network Either mainnet or a testnet. (required)
     * @return ApiResponse&lt;ChainAddressChainIdMapListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ChainAddressChainIdMapListResponse> getChainAddressesWithHttpInfo(String addresses, Network network) throws ApiException {
        com.squareup.okhttp.Call call = getChainAddressesValidateBeforeCall(addresses, network, null, null);
        Type localVarReturnType = new TypeToken<ChainAddressChainIdMapListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Return all address-mapped chain IDs that an address has been seen on chain before. (asynchronously)
     * 
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (required)
     * @param network Either mainnet or a testnet. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChainAddressesAsync(String addresses, Network network, final ApiCallback<ChainAddressChainIdMapListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChainAddressesValidateBeforeCall(addresses, network, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ChainAddressChainIdMapListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTxByHash
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param txHash A primary network (P or X chain) transaction hash. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTxByHashCall(BlockchainId blockchainId, Network network, String txHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/blockchains/{blockchainId}/transactions/{txHash}"
            .replaceAll("\\{" + "blockchainId" + "\\}", apiClient.escapeString(blockchainId.toString()))
            .replaceAll("\\{" + "network" + "\\}", apiClient.escapeString(network.toString()))
            .replaceAll("\\{" + "txHash" + "\\}", apiClient.escapeString(txHash.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTxByHashValidateBeforeCall(BlockchainId blockchainId, Network network, String txHash, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockchainId' is set
        if (blockchainId == null) {
            throw new ApiException("Missing the required parameter 'blockchainId' when calling getTxByHash(Async)");
        }
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling getTxByHash(Async)");
        }
        // verify the required parameter 'txHash' is set
        if (txHash == null) {
            throw new ApiException("Missing the required parameter 'txHash' when calling getTxByHash(Async)");
        }
        
        com.squareup.okhttp.Call call = getTxByHashCall(blockchainId, network, txHash, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns the details of the supplied transaction hash.
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param txHash A primary network (P or X chain) transaction hash. (required)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getTxByHash(BlockchainId blockchainId, Network network, String txHash) throws ApiException {
        ApiResponse<InlineResponse2001> resp = getTxByHashWithHttpInfo(blockchainId, network, txHash);
        return resp.getData();
    }

    /**
     * Returns the details of the supplied transaction hash.
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param txHash A primary network (P or X chain) transaction hash. (required)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getTxByHashWithHttpInfo(BlockchainId blockchainId, Network network, String txHash) throws ApiException {
        com.squareup.okhttp.Call call = getTxByHashValidateBeforeCall(blockchainId, network, txHash, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the details of the supplied transaction hash. (asynchronously)
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param txHash A primary network (P or X chain) transaction hash. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTxByHashAsync(BlockchainId blockchainId, Network network, String txHash, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTxByHashValidateBeforeCall(blockchainId, network, txHash, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUtxosByAddresses
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param assetId Asset ID for any asset (only applicable X-Chain) (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUtxosByAddressesCall(BlockchainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, String assetId, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/blockchains/{blockchainId}/utxos"
            .replaceAll("\\{" + "blockchainId" + "\\}", apiClient.escapeString(blockchainId.toString()))
            .replaceAll("\\{" + "network" + "\\}", apiClient.escapeString(network.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addresses != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addresses", addresses));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));
        if (assetId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("assetId", assetId));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUtxosByAddressesValidateBeforeCall(BlockchainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, String assetId, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockchainId' is set
        if (blockchainId == null) {
            throw new ApiException("Missing the required parameter 'blockchainId' when calling getUtxosByAddresses(Async)");
        }
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling getUtxosByAddresses(Async)");
        }
        
        com.squareup.okhttp.Call call = getUtxosByAddressesCall(blockchainId, network, addresses, pageSize, pageToken, assetId, sortOrder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of UTXOs for the supplied addresses.
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param assetId Asset ID for any asset (only applicable X-Chain) (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 getUtxosByAddresses(BlockchainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, String assetId, SortOrder sortOrder) throws ApiException {
        ApiResponse<InlineResponse2003> resp = getUtxosByAddressesWithHttpInfo(blockchainId, network, addresses, pageSize, pageToken, assetId, sortOrder);
        return resp.getData();
    }

    /**
     * Returns a list of UTXOs for the supplied addresses.
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param assetId Asset ID for any asset (only applicable X-Chain) (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> getUtxosByAddressesWithHttpInfo(BlockchainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, String assetId, SortOrder sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = getUtxosByAddressesValidateBeforeCall(blockchainId, network, addresses, pageSize, pageToken, assetId, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of UTXOs for the supplied addresses. (asynchronously)
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param assetId Asset ID for any asset (only applicable X-Chain) (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUtxosByAddressesAsync(BlockchainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, String assetId, SortOrder sortOrder, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUtxosByAddressesValidateBeforeCall(blockchainId, network, addresses, pageSize, pageToken, assetId, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVertexByHash
     * @param vertexHash A vertex hash string. (required)
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVertexByHashCall(String vertexHash, XChainId blockchainId, Network network, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/blockchains/{blockchainId}/vertices/{vertexHash}"
            .replaceAll("\\{" + "vertexHash" + "\\}", apiClient.escapeString(vertexHash.toString()))
            .replaceAll("\\{" + "blockchainId" + "\\}", apiClient.escapeString(blockchainId.toString()))
            .replaceAll("\\{" + "network" + "\\}", apiClient.escapeString(network.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVertexByHashValidateBeforeCall(String vertexHash, XChainId blockchainId, Network network, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vertexHash' is set
        if (vertexHash == null) {
            throw new ApiException("Missing the required parameter 'vertexHash' when calling getVertexByHash(Async)");
        }
        // verify the required parameter 'blockchainId' is set
        if (blockchainId == null) {
            throw new ApiException("Missing the required parameter 'blockchainId' when calling getVertexByHash(Async)");
        }
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling getVertexByHash(Async)");
        }
        
        com.squareup.okhttp.Call call = getVertexByHashCall(vertexHash, blockchainId, network, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns one vertex with the provided vertex hash on X-Chain.
     * 
     * @param vertexHash A vertex hash string. (required)
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @return XChainVertex
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public XChainVertex getVertexByHash(String vertexHash, XChainId blockchainId, Network network) throws ApiException {
        ApiResponse<XChainVertex> resp = getVertexByHashWithHttpInfo(vertexHash, blockchainId, network);
        return resp.getData();
    }

    /**
     * Returns one vertex with the provided vertex hash on X-Chain.
     * 
     * @param vertexHash A vertex hash string. (required)
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @return ApiResponse&lt;XChainVertex&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<XChainVertex> getVertexByHashWithHttpInfo(String vertexHash, XChainId blockchainId, Network network) throws ApiException {
        com.squareup.okhttp.Call call = getVertexByHashValidateBeforeCall(vertexHash, blockchainId, network, null, null);
        Type localVarReturnType = new TypeToken<XChainVertex>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns one vertex with the provided vertex hash on X-Chain. (asynchronously)
     * 
     * @param vertexHash A vertex hash string. (required)
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVertexByHashAsync(String vertexHash, XChainId blockchainId, Network network, final ApiCallback<XChainVertex> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVertexByHashValidateBeforeCall(vertexHash, blockchainId, network, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<XChainVertex>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getVertexByHeight
     * @param vertexHeight The height of a vertex. (required)
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getVertexByHeightCall(Integer vertexHeight, XChainId blockchainId, Network network, Integer pageSize, String pageToken, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/blockchains/{blockchainId}/vertices:listByHeight"
            .replaceAll("\\{" + "blockchainId" + "\\}", apiClient.escapeString(blockchainId.toString()))
            .replaceAll("\\{" + "network" + "\\}", apiClient.escapeString(network.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vertexHeight != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vertexHeight", vertexHeight));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getVertexByHeightValidateBeforeCall(Integer vertexHeight, XChainId blockchainId, Network network, Integer pageSize, String pageToken, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'vertexHeight' is set
        if (vertexHeight == null) {
            throw new ApiException("Missing the required parameter 'vertexHeight' when calling getVertexByHeight(Async)");
        }
        // verify the required parameter 'blockchainId' is set
        if (blockchainId == null) {
            throw new ApiException("Missing the required parameter 'blockchainId' when calling getVertexByHeight(Async)");
        }
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling getVertexByHeight(Async)");
        }
        
        com.squareup.okhttp.Call call = getVertexByHeightCall(vertexHeight, blockchainId, network, pageSize, pageToken, sortOrder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns vertices with the provided vertex height on X-Chain.
     * 
     * @param vertexHeight The height of a vertex. (required)
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @return ListXChainVerticesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListXChainVerticesResponse getVertexByHeight(Integer vertexHeight, XChainId blockchainId, Network network, Integer pageSize, String pageToken, SortOrder sortOrder) throws ApiException {
        ApiResponse<ListXChainVerticesResponse> resp = getVertexByHeightWithHttpInfo(vertexHeight, blockchainId, network, pageSize, pageToken, sortOrder);
        return resp.getData();
    }

    /**
     * Returns vertices with the provided vertex height on X-Chain.
     * 
     * @param vertexHeight The height of a vertex. (required)
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @return ApiResponse&lt;ListXChainVerticesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListXChainVerticesResponse> getVertexByHeightWithHttpInfo(Integer vertexHeight, XChainId blockchainId, Network network, Integer pageSize, String pageToken, SortOrder sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = getVertexByHeightValidateBeforeCall(vertexHeight, blockchainId, network, pageSize, pageToken, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<ListXChainVerticesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns vertices with the provided vertex height on X-Chain. (asynchronously)
     * 
     * @param vertexHeight The height of a vertex. (required)
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getVertexByHeightAsync(Integer vertexHeight, XChainId blockchainId, Network network, Integer pageSize, String pageToken, SortOrder sortOrder, final ApiCallback<ListXChainVerticesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getVertexByHeightValidateBeforeCall(vertexHeight, blockchainId, network, pageSize, pageToken, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListXChainVerticesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listActivePrimaryNetworkStakingTransactions
     * @param blockchainId A supported chain name for P-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listActivePrimaryNetworkStakingTransactionsCall(PChainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/blockchains/{blockchainId}/transactions:listStaking"
            .replaceAll("\\{" + "blockchainId" + "\\}", apiClient.escapeString(blockchainId.toString()))
            .replaceAll("\\{" + "network" + "\\}", apiClient.escapeString(network.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addresses != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addresses", addresses));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listActivePrimaryNetworkStakingTransactionsValidateBeforeCall(PChainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockchainId' is set
        if (blockchainId == null) {
            throw new ApiException("Missing the required parameter 'blockchainId' when calling listActivePrimaryNetworkStakingTransactions(Async)");
        }
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling listActivePrimaryNetworkStakingTransactions(Async)");
        }
        
        com.squareup.okhttp.Call call = listActivePrimaryNetworkStakingTransactionsCall(blockchainId, network, addresses, pageSize, pageToken, sortOrder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns active staking transactions for supplied addresses.
     * 
     * @param blockchainId A supported chain name for P-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @return ListPChainTransactionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListPChainTransactionsResponse listActivePrimaryNetworkStakingTransactions(PChainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, SortOrder sortOrder) throws ApiException {
        ApiResponse<ListPChainTransactionsResponse> resp = listActivePrimaryNetworkStakingTransactionsWithHttpInfo(blockchainId, network, addresses, pageSize, pageToken, sortOrder);
        return resp.getData();
    }

    /**
     * Returns active staking transactions for supplied addresses.
     * 
     * @param blockchainId A supported chain name for P-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @return ApiResponse&lt;ListPChainTransactionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListPChainTransactionsResponse> listActivePrimaryNetworkStakingTransactionsWithHttpInfo(PChainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, SortOrder sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = listActivePrimaryNetworkStakingTransactionsValidateBeforeCall(blockchainId, network, addresses, pageSize, pageToken, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<ListPChainTransactionsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns active staking transactions for supplied addresses. (asynchronously)
     * 
     * @param blockchainId A supported chain name for P-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listActivePrimaryNetworkStakingTransactionsAsync(PChainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, SortOrder sortOrder, final ApiCallback<ListPChainTransactionsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listActivePrimaryNetworkStakingTransactionsValidateBeforeCall(blockchainId, network, addresses, pageSize, pageToken, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListPChainTransactionsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLatestPrimaryNetworkBlocks
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLatestPrimaryNetworkBlocksCall(BlockchainId blockchainId, Network network, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/blockchains/{blockchainId}/blocks"
            .replaceAll("\\{" + "blockchainId" + "\\}", apiClient.escapeString(blockchainId.toString()))
            .replaceAll("\\{" + "network" + "\\}", apiClient.escapeString(network.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLatestPrimaryNetworkBlocksValidateBeforeCall(BlockchainId blockchainId, Network network, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockchainId' is set
        if (blockchainId == null) {
            throw new ApiException("Missing the required parameter 'blockchainId' when calling listLatestPrimaryNetworkBlocks(Async)");
        }
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling listLatestPrimaryNetworkBlocks(Async)");
        }
        
        com.squareup.okhttp.Call call = listLatestPrimaryNetworkBlocksCall(blockchainId, network, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns latest blocks, up to user defined limit on P-Chain, X-Chain or C-Chain.
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListBlocksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListBlocksResponse listLatestPrimaryNetworkBlocks(BlockchainId blockchainId, Network network, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListBlocksResponse> resp = listLatestPrimaryNetworkBlocksWithHttpInfo(blockchainId, network, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Returns latest blocks, up to user defined limit on P-Chain, X-Chain or C-Chain.
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListBlocksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListBlocksResponse> listLatestPrimaryNetworkBlocksWithHttpInfo(BlockchainId blockchainId, Network network, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listLatestPrimaryNetworkBlocksValidateBeforeCall(blockchainId, network, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListBlocksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns latest blocks, up to user defined limit on P-Chain, X-Chain or C-Chain. (asynchronously)
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLatestPrimaryNetworkBlocksAsync(BlockchainId blockchainId, Network network, Integer pageSize, String pageToken, final ApiCallback<ListBlocksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLatestPrimaryNetworkBlocksValidateBeforeCall(blockchainId, network, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListBlocksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLatestPrimaryNetworkTransactions
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLatestPrimaryNetworkTransactionsCall(BlockchainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/blockchains/{blockchainId}/transactions"
            .replaceAll("\\{" + "blockchainId" + "\\}", apiClient.escapeString(blockchainId.toString()))
            .replaceAll("\\{" + "network" + "\\}", apiClient.escapeString(network.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (addresses != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("addresses", addresses));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));
        if (sortOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sortOrder", sortOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLatestPrimaryNetworkTransactionsValidateBeforeCall(BlockchainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, SortOrder sortOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockchainId' is set
        if (blockchainId == null) {
            throw new ApiException("Missing the required parameter 'blockchainId' when calling listLatestPrimaryNetworkTransactions(Async)");
        }
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling listLatestPrimaryNetworkTransactions(Async)");
        }
        
        com.squareup.okhttp.Call call = listLatestPrimaryNetworkTransactionsCall(blockchainId, network, addresses, pageSize, pageToken, sortOrder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns latest transactions. If addresses are supplied, returns transactions for those addresses.
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 listLatestPrimaryNetworkTransactions(BlockchainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, SortOrder sortOrder) throws ApiException {
        ApiResponse<InlineResponse2002> resp = listLatestPrimaryNetworkTransactionsWithHttpInfo(blockchainId, network, addresses, pageSize, pageToken, sortOrder);
        return resp.getData();
    }

    /**
     * Returns latest transactions. If addresses are supplied, returns transactions for those addresses.
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> listLatestPrimaryNetworkTransactionsWithHttpInfo(BlockchainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, SortOrder sortOrder) throws ApiException {
        com.squareup.okhttp.Call call = listLatestPrimaryNetworkTransactionsValidateBeforeCall(blockchainId, network, addresses, pageSize, pageToken, sortOrder, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns latest transactions. If addresses are supplied, returns transactions for those addresses. (asynchronously)
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param addresses A comma separated list of X-Chain or P-Chain wallet addresses, starting with \&quot;avax\&quot;/\&quot;fuji\&quot;, \&quot;P-avax\&quot;/\&quot;P-fuji\&quot; or \&quot;X-avax\&quot;/\&quot;X-fuji\&quot;. (optional)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param sortOrder The order by which to sort results. Use \&quot;asc\&quot; for ascending       order, \&quot;desc\&quot; for descending order. Sorted by timestamp or the &#x60;sortBy&#x60;       query parameter, if provided. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLatestPrimaryNetworkTransactionsAsync(BlockchainId blockchainId, Network network, String addresses, Integer pageSize, String pageToken, SortOrder sortOrder, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLatestPrimaryNetworkTransactionsValidateBeforeCall(blockchainId, network, addresses, pageSize, pageToken, sortOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listLatestXChainVertices
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLatestXChainVerticesCall(XChainId blockchainId, Network network, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/blockchains/{blockchainId}/vertices"
            .replaceAll("\\{" + "blockchainId" + "\\}", apiClient.escapeString(blockchainId.toString()))
            .replaceAll("\\{" + "network" + "\\}", apiClient.escapeString(network.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLatestXChainVerticesValidateBeforeCall(XChainId blockchainId, Network network, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockchainId' is set
        if (blockchainId == null) {
            throw new ApiException("Missing the required parameter 'blockchainId' when calling listLatestXChainVertices(Async)");
        }
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling listLatestXChainVertices(Async)");
        }
        
        com.squareup.okhttp.Call call = listLatestXChainVerticesCall(blockchainId, network, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns latest vertices, up to user defined limit on X-Chain.
     * 
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListXChainVerticesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListXChainVerticesResponse listLatestXChainVertices(XChainId blockchainId, Network network, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListXChainVerticesResponse> resp = listLatestXChainVerticesWithHttpInfo(blockchainId, network, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Returns latest vertices, up to user defined limit on X-Chain.
     * 
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListXChainVerticesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListXChainVerticesResponse> listLatestXChainVerticesWithHttpInfo(XChainId blockchainId, Network network, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listLatestXChainVerticesValidateBeforeCall(blockchainId, network, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListXChainVerticesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns latest vertices, up to user defined limit on X-Chain. (asynchronously)
     * 
     * @param blockchainId A supported chain name for X-Chain. BlockchainId values will be deprecated in a future release. Please use chain names like x-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLatestXChainVerticesAsync(XChainId blockchainId, Network network, Integer pageSize, String pageToken, final ApiCallback<ListXChainVerticesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLatestXChainVerticesValidateBeforeCall(blockchainId, network, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListXChainVerticesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listPrimaryNetworkBlocksByNodeId
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param nodeId A primary network (P or X chain) nodeId. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listPrimaryNetworkBlocksByNodeIdCall(BlockchainId blockchainId, Network network, String nodeId, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/networks/{network}/blockchains/{blockchainId}/nodes/{nodeId}/blocks"
            .replaceAll("\\{" + "blockchainId" + "\\}", apiClient.escapeString(blockchainId.toString()))
            .replaceAll("\\{" + "network" + "\\}", apiClient.escapeString(network.toString()))
            .replaceAll("\\{" + "nodeId" + "\\}", apiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageToken", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPrimaryNetworkBlocksByNodeIdValidateBeforeCall(BlockchainId blockchainId, Network network, String nodeId, Integer pageSize, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'blockchainId' is set
        if (blockchainId == null) {
            throw new ApiException("Missing the required parameter 'blockchainId' when calling listPrimaryNetworkBlocksByNodeId(Async)");
        }
        // verify the required parameter 'network' is set
        if (network == null) {
            throw new ApiException("Missing the required parameter 'network' when calling listPrimaryNetworkBlocksByNodeId(Async)");
        }
        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling listPrimaryNetworkBlocksByNodeId(Async)");
        }
        
        com.squareup.okhttp.Call call = listPrimaryNetworkBlocksByNodeIdCall(blockchainId, network, nodeId, pageSize, pageToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns latest blocks proposed by a given NodeID, up to user defined limit.
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param nodeId A primary network (P or X chain) nodeId. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ListBlocksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListBlocksResponse listPrimaryNetworkBlocksByNodeId(BlockchainId blockchainId, Network network, String nodeId, Integer pageSize, String pageToken) throws ApiException {
        ApiResponse<ListBlocksResponse> resp = listPrimaryNetworkBlocksByNodeIdWithHttpInfo(blockchainId, network, nodeId, pageSize, pageToken);
        return resp.getData();
    }

    /**
     * Returns latest blocks proposed by a given NodeID, up to user defined limit.
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param nodeId A primary network (P or X chain) nodeId. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @return ApiResponse&lt;ListBlocksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListBlocksResponse> listPrimaryNetworkBlocksByNodeIdWithHttpInfo(BlockchainId blockchainId, Network network, String nodeId, Integer pageSize, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = listPrimaryNetworkBlocksByNodeIdValidateBeforeCall(blockchainId, network, nodeId, pageSize, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ListBlocksResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns latest blocks proposed by a given NodeID, up to user defined limit. (asynchronously)
     * 
     * @param blockchainId A supported chain name. BlockchainId values will be deprecated in a future release. Please use chain names like p-chain, x-chain or c-chain instead! (required)
     * @param network Either mainnet or a testnet. (required)
     * @param nodeId A primary network (P or X chain) nodeId. (required)
     * @param pageSize The maximum number of items to return. The minimum page size       is 1. The maximum pageSize is 100. (optional, default to 10)
     * @param pageToken A page token, received from a previous list call. Provide this to retrieve the subsequent page. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPrimaryNetworkBlocksByNodeIdAsync(BlockchainId blockchainId, Network network, String nodeId, Integer pageSize, String pageToken, final ApiCallback<ListBlocksResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPrimaryNetworkBlocksByNodeIdValidateBeforeCall(blockchainId, network, nodeId, pageSize, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListBlocksResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
